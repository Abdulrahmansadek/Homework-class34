2021-10-21 10:16:53 info: ----------------------------------------------
2021-10-21 10:16:53 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2021-10-21 10:16:53 info: ----------------------------------------------
2021-10-21 10:16:55 info: All unit tests passed.
2021-10-21 10:16:56 info: All steps were completed successfully
2021-10-21 10:17:24 info: ----------------------------------------
2021-10-21 10:17:24 info: >>> Running Unit Test `ex2-dogYears` <<<
2021-10-21 10:17:24 info: ----------------------------------------
2021-10-21 10:17:25 info: All unit tests passed.
2021-10-21 10:17:26 info: All steps were completed successfully
2021-10-21 10:18:42 info: -------------------------------------------
2021-10-21 10:18:42 info: >>> Running Unit Test `ex3-tellFortune` <<<
2021-10-21 10:18:42 info: -------------------------------------------
2021-10-21 10:18:43 error: *** Unit Test Error Report ***

- tellFortune should call function `selectRandomly` for each of its arguments

2021-10-21 10:18:46 info: Disclaimer turned off
2021-10-21 10:18:50 info: -------------------------------------------
2021-10-21 10:18:50 info: >>> Running Unit Test `ex3-tellFortune` <<<
2021-10-21 10:18:50 info: -------------------------------------------
2021-10-21 10:18:52 error: *** Unit Test Error Report ***

- tellFortune should call function `selectRandomly` for each of its arguments

2021-10-21 10:21:05 info: -------------------------------------------
2021-10-21 10:21:05 info: >>> Running Unit Test `ex3-tellFortune` <<<
2021-10-21 10:21:05 info: -------------------------------------------
2021-10-21 10:21:06 info: All unit tests passed.
2021-10-21 10:21:07 info: All steps were completed successfully
2021-10-21 10:21:44 info: --------------------------------------------
2021-10-21 10:21:44 info: >>> Running Unit Test `ex4-shoppingCart` <<<
2021-10-21 10:21:44 info: --------------------------------------------
2021-10-21 10:21:44 warn: A unit test file was not provided.
2021-10-21 10:21:45 info: All steps were completed successfully
2021-10-21 10:22:13 info: ------------------------------------------------
2021-10-21 10:22:13 info: >>> Running Unit Test `ex5-shoppingCartPure` <<<
2021-10-21 10:22:13 info: ------------------------------------------------
2021-10-21 10:22:13 warn: A unit test file was not provided.
2021-10-21 10:22:14 info: All steps were completed successfully
2021-10-21 10:26:04 info: -----------------------------------------
2021-10-21 10:26:04 info: >>> Running Unit Test `ex6-totalCost` <<<
2021-10-21 10:26:04 info: -----------------------------------------
2021-10-21 10:26:04 warn: A unit test file was not provided.
2021-10-21 10:26:05 error: *** ESLint Report ***

ex6-totalCost.js
  33:12  warning  'grocery' is never reassigned. Use 'const' instead  no-autofix/prefer-const

✖ 1 problem (0 errors, 1 warning)


2021-10-21 10:26:28 info: -----------------------------------------
2021-10-21 10:26:28 info: >>> Running Unit Test `ex6-totalCost` <<<
2021-10-21 10:26:28 info: -----------------------------------------
2021-10-21 10:26:28 warn: A unit test file was not provided.
2021-10-21 10:26:29 info: All steps were completed successfully
2021-10-21 10:30:16 info: -------------------------------------------
2021-10-21 10:30:16 info: >>> Running Unit Test `ex7-mindPrivacy` <<<
2021-10-21 10:30:16 info: -------------------------------------------
2021-10-21 10:30:16 warn: A unit test file was not provided.
2021-10-21 10:30:17 info: All steps were completed successfully
2021-10-21 10:42:26 info: ------------------------------------------------------
2021-10-21 10:42:26 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2021-10-21 10:42:26 info: ------------------------------------------------------
2021-10-21 10:42:27 info: All unit tests passed.
2021-10-21 10:42:28 info: All steps were completed successfully
2021-10-21 07:05:56 info: -------------------------------------------------
2021-10-21 07:05:56 info: >>> Running Unit Test `ex2-mondaysWorth.test` <<<
2021-10-21 07:05:56 info: -------------------------------------------------
2021-10-21 07:05:58 info: All unit tests passed.
2021-10-21 07:05:59 info: All steps were completed successfully
2021-10-21 07:06:37 info: -------------------------------------------------
2021-10-21 07:06:37 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-21 07:06:37 info: -------------------------------------------------
2021-10-21 07:06:39 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array (1 ms)
    ✕ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      37 |   test('should take two parameters', () => {
      38 |     // TODO replace next line with your code
    > 39 |     expect(false).toBe(true);
         |                   ^
      40 |   });
      41 |
      42 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:39:19)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      44 |     const originalFruitBasketContents = [...fruitBasket];
      45 |     // TODO replace next line with your code
    > 46 |     expect(false).toBe(true);
         |                   ^
      47 |   });
      48 |
      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:46:19)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      50 |     // TODO replace next line with your code
    > 51 |     expect(false).toBe(true);
         |                   ^
      52 |   });
      53 | });
      54 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:51:19)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        0.8 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-21 07:06:39 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  44:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-10-21 07:07:23 info: -------------------------------------------------
2021-10-21 07:07:23 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-21 07:07:23 info: -------------------------------------------------
2021-10-21 07:07:24 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array
    ✕ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      37 |   test('should take two parameters', () => {
      38 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 39 |     expect(false).toBe(true);
         |                   ^
      40 |   });
      41 |
      42 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:39:19)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      44 |     const originalFruitBasketContents = [...fruitBasket];
      45 |     // TODO replace next line with your code
    > 46 |     expect(false).toBe(true);
         |                   ^
      47 |   });
      48 |
      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:46:19)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      50 |     // TODO replace next line with your code
    > 51 |     expect(false).toBe(true);
         |                   ^
      52 |   });
      53 | });
      54 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:51:19)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        0.685 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-21 07:07:25 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  44:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-10-21 07:07:42 info: -------------------------------------------------
2021-10-21 07:07:42 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-21 07:07:42 info: -------------------------------------------------
2021-10-21 07:07:44 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array
    ✕ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      37 |   test('should take two parameters', () => {
      38 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 39 |     expect(false).toBe(true);
         |                   ^
      40 |   });
      41 |
      42 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:39:19)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      44 |     const originalFruitBasketContents = [...fruitBasket];
      45 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 46 |     expect(false).toBe(true);
         |                   ^
      47 |   });
      48 |
      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:46:19)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      49 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      50 |     // TODO replace next line with your code
    > 51 |     expect(false).toBe(true);
         |                   ^
      52 |   });
      53 | });
      54 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:51:19)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        0.786 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-21 07:07:44 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  44:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-10-21 07:14:56 info: ------------------------------------------
2021-10-21 07:14:56 info: >>> Running Unit Test `ex4-observable` <<<
2021-10-21 07:14:56 info: ------------------------------------------
2021-10-21 07:14:57 info: All unit tests passed.
2021-10-21 07:14:58 info: All steps were completed successfully
2021-10-21 07:17:22 info: --------------------------------------
2021-10-21 07:17:22 info: >>> Running Unit Test `ex5-wallet` <<<
2021-10-21 07:17:22 info: --------------------------------------
2021-10-21 07:17:23 error: *** Unit Test Error Report ***

- wallet q1: At line 26, which variables are in the scope marked Closure?
- wallet q2: What is in the Call Stack, from top to bottom?
- wallet q3: What tooltip appears when hovering over the third debug button?
- wallet q4: What is displayed in the console?
- wallet q5: The owner of the wallet with insufficient funds is:

2021-10-21 07:18:19 info: --------------------------------------
2021-10-21 07:18:19 info: >>> Running Unit Test `ex5-wallet` <<<
2021-10-21 07:18:19 info: --------------------------------------
2021-10-21 07:18:21 info: All unit tests passed.
2021-10-21 07:18:22 info: All steps were completed successfully
2021-10-24 11:57:42 info: -------------------------------------------------
2021-10-24 11:57:42 info: >>> Running Unit Test `ex2-mondaysWorth.test` <<<
2021-10-24 11:57:42 info: -------------------------------------------------
2021-10-24 11:57:44 info: All unit tests passed.
2021-10-24 11:57:45 info: All steps were completed successfully
2021-10-24 11:58:05 info: -------------------------------------------------
2021-10-24 11:58:05 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-24 11:58:05 info: -------------------------------------------------
2021-10-24 11:58:07 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  ● Test suite failed to run

    TypeError: basket.incluides is not a function

      29 | function sanitizeFruitBasket(basket, fruit) {
      30 |   const newBasket = basket.filter((basket) => {
    > 31 |     const x = basket.incluides(fruit);
         |                      ^
      32 |     return basket !== x;
      33 |   });
      34 |   return newBasket;

      at filter (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:31:22)
          at Array.filter (<anonymous>)
      at sanitizeFruitBasket (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:30:28)
      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:36:1)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.785 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-24 11:58:07 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  46:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-10-24 11:58:08 error: *** Spell Checker Report ***

ex3-lemonAllergy.test.js:31:22 - Unknown word (incluides)

2021-10-24 11:59:40 info: -------------------------------------------------
2021-10-24 11:59:40 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-24 11:59:40 info: -------------------------------------------------
2021-10-24 11:59:41 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array (1 ms)
    ✕ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      39 |   test('should take two parameters', () => {
      40 |     // TODO replace next line with your code
    > 41 |     expect(false).toBe(true);
         |                   ^
      42 |   });
      43 |
      44 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:41:19)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      46 |     const originalFruitBasketContents = [...fruitBasket];
      47 |     // TODO replace next line with your code
    > 48 |     expect(false).toBe(true);
         |                   ^
      49 |   });
      50 |
      51 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:48:19)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      51 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      52 |     // TODO replace next line with your code
    > 53 |     expect(false).toBe(true);
         |                   ^
      54 |   });
      55 | });
      56 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:53:19)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        0.812 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-24 11:59:42 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  46:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-10-24 08:15:50 info: -------------------------------------------------
2021-10-24 08:15:50 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-24 08:15:51 info: -------------------------------------------------
2021-10-24 08:15:52 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array
    ✕ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      33 |   test('should take two parameters', () => {
      34 |     // TODO replace next line with your code
    > 35 |     expect(false).toBe(true);
         |                   ^
      36 |   });
      37 |
      38 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:35:19)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      40 |     const originalFruitBasketContents = [...fruitBasket];
      41 |     // TODO replace next line with your code
    > 42 |     expect(false).toBe(true);
         |                   ^
      43 |   });
      44 |
      45 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:42:19)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      45 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      46 |     // TODO replace next line with your code
    > 47 |     expect(false).toBe(true);
         |                   ^
      48 |   });
      49 | });
      50 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:47:19)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 total
Snapshots:   0 total
Time:        0.811 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-10-24 08:15:53 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  29:30  error  'basket' is defined but never used                                no-unused-vars
  29:38  error  'fruit' is defined but never used                                 no-unused-vars
  40:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 3 problems (3 errors, 0 warnings)


2021-10-26 07:23:17 info: -------------------------------------------------
2021-10-26 07:23:17 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-10-26 07:23:17 info: -------------------------------------------------
2021-10-26 07:23:19 error: *** Unit Test Error Report ***

  console.log
    [ 'apple', 'grapefruit', 'banana', 'watermelon' ]

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:36:9)


2021-10-26 07:23:19 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  47:11  error  'originalFruitBasketContents' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-14 04:33:48 info: -------------------------------------------------
2021-11-14 04:33:49 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-11-14 04:33:49 info: -------------------------------------------------
2021-11-14 04:33:50 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (1 ms)
    ✕ should not modify the original `fruitBasket` array (3 ms)
    ✕ should return a new array that does not include the unwanted `lemon` (2 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      46 |     const originalFruitBasketContents = [...fruitBasket];
      47 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 48 |     expect(originalFruitBasketContents).toBe(fruitBasket);
         |                                         ^
      49 |   });
      50 |
      51 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:48:41)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    - Expected  - 0
    + Received  + 1

      Array [
        "apple",
    +   "grapefruit",
        "banana",
        "watermelon",
      ]

      52 |     const result = sanitizeFruitBasket(fruitBasket, 'lemon');
      53 |     const expected = ['apple', 'banana', 'watermelon'];
    > 54 |     expect(result).toBe(expected);
         |                    ^
      55 |   });
      56 | });
      57 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:54:20)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.844 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-11-14 04:35:05 info: -------------------------------------------------
2021-11-14 04:35:05 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-11-14 04:35:05 info: -------------------------------------------------
2021-11-14 04:35:07 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (1 ms)
    ✕ should not modify the original `fruitBasket` array (3 ms)
    ✕ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      46 |     const originalFruitBasketContents = [...fruitBasket];
      47 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 48 |     expect(originalFruitBasketContents).toBe(fruitBasket);
         |                                         ^
      49 |   });
      50 |
      51 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:48:41)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "grapefruit", "banana", "watermelon"]
    Received: serializes to the same string

      52 |     const result = sanitizeFruitBasket(fruitBasket, 'lemon');
      53 |     const expected = ['apple', 'grapefruit', 'banana', 'watermelon'];
    > 54 |     expect(result).toBe(expected);
         |                    ^
      55 |   });
      56 | });
      57 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:54:20)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.809 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-11-16 09:44:13 info: -------------------------------------------------
2021-11-16 09:44:13 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-11-16 09:44:13 info: -------------------------------------------------
2021-11-16 09:44:15 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (1 ms)
    ✕ should not modify the original `fruitBasket` array (4 ms)
    ✕ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      46 |     const originalFruitBasketContents = [...fruitBasket];
      47 |     sanitizeFruitBasket(fruitBasket, 'lemon');
    > 48 |     expect(originalFruitBasketContents).toBe([...fruitBasket]);
         |                                         ^
      49 |   });
      50 |
      51 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:48:41)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "grapefruit", "banana", "watermelon"]
    Received: serializes to the same string

      52 |     const result = sanitizeFruitBasket(fruitBasket, 'lemon');
      53 |     const expected = ['apple', 'grapefruit', 'banana', 'watermelon'];
    > 54 |     expect(result).toBe(expected);
         |                    ^
      55 |   });
      56 | });
      57 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:54:20)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.817 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-11-16 09:45:28 info: -------------------------------------------------
2021-11-16 09:45:28 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-11-16 09:45:28 info: -------------------------------------------------
2021-11-16 09:45:29 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (1 ms)
    ✓ should not modify the original `fruitBasket` array (1 ms)
    ✕ should return a new array that does not include the unwanted `lemon` (2 ms)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "grapefruit", "banana", "watermelon"]
    Received: serializes to the same string

      52 |     const result = sanitizeFruitBasket(fruitBasket, 'lemon');
      53 |     const expected = ['apple', 'grapefruit', 'banana', 'watermelon'];
    > 54 |     expect(result).toBe(expected);
         |                    ^
      55 |   });
      56 | });
      57 |

      at Object.<anonymous> (1-JavaScript/Week4/homework/ex3-lemonAllergy.test.js:54:20)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.793 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.

2021-11-16 09:45:55 info: -------------------------------------------------
2021-11-16 09:45:55 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2021-11-16 09:45:55 info: -------------------------------------------------
2021-11-16 09:45:56 info: All unit tests passed.
2021-11-16 09:45:58 info: All steps were completed successfully
2021-11-21 08:34:21 info: ---------------------------------------
2021-11-21 08:34:21 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 08:34:21 info: ---------------------------------------
2021-11-21 08:34:21 info: Exercise has not yet been modified
2021-11-21 08:34:23 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✓ should exist and be executable (2 ms)
    ✕ should have all TODO comments removed (6 ms)
    ✕ should call `new Promise()`
    ✕ should take a single argument (2 ms)
    ✕ `resolve()` should be called with a one argument
    ✕ `reject()` should be called with a one argument
    ✕ should resolve when called with a string argument (1 ms)
    ✕ should reject with an Error object when called without an argument

  ● getAnonName › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:55)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Promise

    Received value has no prototype
    Received value: undefined

      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
    > 70 |     expect(promise).toBeInstanceOf(Promise);
         |                     ^
      71 |     return expect(promise).resolves.toEqual('John Doe');
      72 |   });
      73 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:70:21)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Promise

    Received value has no prototype
    Received value: undefined

      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
    > 78 |     expect(promise).toBeInstanceOf(Promise);
         |                     ^
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);
      80 |   });
      81 | });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:78:21)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        0.916 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 08:34:45 info: ---------------------------------------
2021-11-21 08:34:45 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 08:34:45 info: ---------------------------------------
2021-11-21 08:34:45 info: Exercise has not yet been modified
2021-11-21 08:34:46 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✓ should exist and be executable (1 ms)
    ✕ should have all TODO comments removed (8 ms)
    ✕ should call `new Promise()`
    ✕ should take a single argument (1 ms)
    ✕ `resolve()` should be called with a one argument
    ✕ `reject()` should be called with a one argument (1 ms)
    ✕ should resolve when called with a string argument
    ✕ should reject with an Error object when called without an argument (1 ms)

  ● getAnonName › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:55)

  ● getAnonName › should call `new Promise()`

    expect(received).toBeDefined()

    Received: undefined

      49 |
      50 |   test('should call `new Promise()`', () => {
    > 51 |     expect(state.newPromise).toBeDefined();
         |                              ^
      52 |   });
      53 |
      54 |   test('should take a single argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:51:30)

  ● getAnonName › should take a single argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      53 |
      54 |   test('should take a single argument', () => {
    > 55 |     expect(state.paramCount).toBe(1);
         |                              ^
      56 |   });
      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:55:30)

  ● getAnonName › `resolve()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      57 |
      58 |   test('`resolve()` should be called with a one argument', () => {
    > 59 |     expect(state.resolve).toBe(1);
         |                           ^
      60 |   });
      61 |
      62 |   test('`reject()` should be called with a one argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:59:27)

  ● getAnonName › `reject()` should be called with a one argument

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: undefined

      61 |
      62 |   test('`reject()` should be called with a one argument', () => {
    > 63 |     expect(state.reject).toBe(1);
         |                          ^
      64 |   });
      65 |
      66 |   test('should resolve when called with a string argument', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:63:26)

  ● getAnonName › should resolve when called with a string argument

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Promise

    Received value has no prototype
    Received value: undefined

      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
    > 70 |     expect(promise).toBeInstanceOf(Promise);
         |                     ^
      71 |     return expect(promise).resolves.toEqual('John Doe');
      72 |   });
      73 |

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:70:21)

  ● getAnonName › should resolve when called with a string argument

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      65 |
      66 |   test('should resolve when called with a string argument', () => {
    > 67 |     expect.assertions(3);
         |            ^
      68 |     expect(exported).toBeDefined();
      69 |     const promise = getAnonName('John');
      70 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:67:12)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Promise

    Received value has no prototype
    Received value: undefined

      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
    > 78 |     expect(promise).toBeInstanceOf(Promise);
         |                     ^
      79 |     return expect(promise).rejects.toBeInstanceOf(Error);
      80 |   });
      81 | });

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:78:21)

  ● getAnonName › should reject with an Error object when called without an argument

    expect.assertions(3)

    Expected three assertions to be called but received two assertion calls.

      73 |
      74 |   test('should reject with an Error object when called without an argument', () => {
    > 75 |     expect.assertions(3);
         |            ^
      76 |     expect(exported).toBeDefined();
      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:75:12)

Test Suites: 1 failed, 1 total
Tests:       7 failed, 1 passed, 8 total
Snapshots:   0 total
Time:        0.704 s, estimated 1 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 08:39:11 info: ---------------------------------------
2021-11-21 08:39:11 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 08:39:11 info: ---------------------------------------
2021-11-21 08:39:15 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-johnWho.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js
  getAnonName
    ✓ should exist and be executable (1 ms)
    ✕ should have all TODO comments removed (5 ms)
    ✓ should call `new Promise()`
    ✓ should take a single argument
    ✓ `resolve()` should be called with a one argument
    ✓ `reject()` should be called with a one argument
    ✓ should resolve when called with a string argument (1004 ms)
    ✕ should reject with an Error object when called without an argument (1015 ms)

  ● getAnonName › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:48:55)

  ● getAnonName › should reject with an Error object when called without an argument

    expect(received).rejects.toBeInstanceOf(expected)

    Expected constructor: Error

    Received value has no prototype
    Received value: "You didn't pass in a first name!"

      77 |     const promise = getAnonName();
      78 |     expect(promise).toBeInstanceOf(Promise);
    > 79 |     return expect(promise).rejects.toBeInstanceOf(Error);
         |                                    ^
      80 |   });
      81 | });
      82 |

      at Object.toBeInstanceOf (node_modules/expect/build/index.js:241:20)
      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex1-johnWho.test.js:79:36)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 6 passed, 8 total
Snapshots:   0 total
Time:        2.873 s
Ran all test suites matching /ex1-johnWho.test.js/i.

2021-11-21 08:41:03 info: ---------------------------------------
2021-11-21 08:41:03 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 08:41:03 info: ---------------------------------------
2021-11-21 08:41:07 error: *** Unit Test Error Report ***

  console.log
    John Doe

      at 3-UsingAPIs/Week1/homework/ex1-johnWho.js:27:13


2021-11-21 08:48:48 info: -------------------------------------------------
2021-11-21 08:48:48 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 08:48:48 info: -------------------------------------------------
2021-11-21 08:48:49 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:28:30

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:33:29

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:37:29


2021-11-21 08:52:30 info: -------------------------------------------------
2021-11-21 08:52:30 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 08:52:30 info: -------------------------------------------------
2021-11-21 08:52:31 error: *** Unit Test Error Report ***

  console.log
    This is a double digit number!

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:28:30

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:33:29

  console.log
    undefined

      at 3-UsingAPIs/Week1/homework/ex2-checkDoubleDigits.js:37:29


2021-11-21 08:52:41 info: ----------------------------------------
2021-11-21 08:52:41 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 08:52:41 info: ----------------------------------------
2021-11-21 08:52:42 info: All unit tests passed.
2021-11-21 08:52:43 info: All steps were completed successfully
2021-11-21 08:53:17 info: ----------------------------------------
2021-11-21 08:53:17 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 08:53:17 info: ----------------------------------------
2021-11-21 08:53:19 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-rollDice.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js
  rollDice
    ✓ should exist and be executable (1 ms)
    ✓ should have all TODO comments removed
    ✓ should call `new Promise()`
    ✓ `resolve()` should be called with a one argument (1 ms)
    ✓ `reject()` should be called with a one argument
    ✓ should resolve when the dice settles successfully
    ✕ should reject with an Error when the dice rolls off the table (2 ms)

  ● rollDice › should reject with an Error when the dice rolls off the table

    expect(received).toBeInstanceOf(expected)

    Expected constructor: Error

    Received value has no prototype
    Received value: "Oops... Dice rolled off the table."

      89 |       await promise;
      90 |     } catch (err) {
    > 91 |       expect(err).toBeInstanceOf(Error);
         |                   ^
      92 |     } finally {
      93 |       setTimeoutSpy.mockRestore();
      94 |       randomSpy.mockRestore();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex3-rollDice.test.js:91:19)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 6 passed, 7 total
Snapshots:   0 total
Time:        0.809 s, estimated 1 s
Ran all test suites matching /ex3-rollDice.test.js/i.

2021-11-21 08:53:45 info: ----------------------------------------
2021-11-21 08:53:45 info: >>> Running Unit Test `ex3-rollDice` <<<
2021-11-21 08:53:45 info: ----------------------------------------
2021-11-21 08:53:46 info: All unit tests passed.
2021-11-21 08:53:48 info: All steps were completed successfully
2021-11-21 08:54:13 info: -------------------------------------------------
2021-11-21 08:54:13 info: >>> Running Unit Test `ex2-checkDoubleDigits` <<<
2021-11-21 08:54:13 info: -------------------------------------------------
2021-11-21 08:54:14 info: All unit tests passed.
2021-11-21 08:54:15 info: All steps were completed successfully
2021-11-21 08:55:40 info: ---------------------------------------
2021-11-21 08:55:40 info: >>> Running Unit Test `ex1-johnWho` <<<
2021-11-21 08:55:40 info: ---------------------------------------
2021-11-21 08:55:44 info: All unit tests passed.
2021-11-21 08:55:45 info: All steps were completed successfully
2021-11-21 08:57:35 info: --------------------------------------------
2021-11-21 08:57:35 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 08:57:35 info: --------------------------------------------
2021-11-21 08:57:36 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✓ should exist and be executable (1 ms)
    ✓ should have all TODO comments removed
    ✕ should use `dices.map()` (2 ms)
    ✓ should use `Promise.all()`
    ✓ should resolve when all dices settle successfully (1 ms)
    ✓ should reject with an Error when a dice rolls off the table (2 ms)

  ● ex4-pokerDiceAll › should use `dices.map()`

    expect(received).toBeDefined()

    Received: undefined

      37 |
      38 |   test('should use `dices.map()`', () => {
    > 39 |     expect(state.dicesMap).toBeDefined();
         |                            ^
      40 |   });
      41 |
      42 |   test('should use `Promise.all()`', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:39:28)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 5 passed, 6 total
Snapshots:   0 total
Time:        0.883 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 08:59:30 info: --------------------------------------------
2021-11-21 08:59:30 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 08:59:30 info: --------------------------------------------
2021-11-21 08:59:32 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
(node:37714) UnhandledPromiseRejectionWarning: TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))
(Use `node --trace-warnings ...` to show where the warning was created)
(node:37714) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
(node:37714) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:37714) UnhandledPromiseRejectionWarning: TypeError: number 2 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37714) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)
(node:37714) UnhandledPromiseRejectionWarning: TypeError: number 3 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37714) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:37714) UnhandledPromiseRejectionWarning: TypeError: number 4 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37714) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 4)
(node:37714) UnhandledPromiseRejectionWarning: TypeError: number 5 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37714) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 5)
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✕ should exist and be executable (2 ms)
    ✓ should have all TODO comments removed
    ✓ should use `dices.map()` (1 ms)
    ✓ should use `Promise.all()`
    ✕ should resolve when all dices settle successfully (1 ms)
    ✕ should reject with an Error when a dice rolls off the table

  ● ex4-pokerDiceAll › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      31 |
      32 |   test('should exist and be executable', () => {
    > 33 |     expect(exported).toBeDefined();
         |                      ^
      34 |   });
      35 |
      36 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:33:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect(received).toBeDefined()

    Received: undefined

      46 |   test('should resolve when all dices settle successfully', async () => {
      47 |     expect.assertions(4);
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      51 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:48:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect.assertions(4)

    Expected four assertions to be called but received one assertion call.

      45 |
      46 |   test('should resolve when all dices settle successfully', async () => {
    > 47 |     expect.assertions(4);
         |            ^
      48 |     expect(exported).toBeDefined();
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:47:12)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
      70 |     expect.assertions(3);
    > 71 |     expect(exported).toBeDefined();
         |                      ^
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      74 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:71:22)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      68 |
      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
    > 70 |     expect.assertions(3);
         |            ^
      71 |     expect(exported).toBeDefined();
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:70:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 passed, 6 total
Snapshots:   0 total
Time:        0.842 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 08:59:32 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  27:7  error  'rollDice' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 08:59:57 info: --------------------------------------------
2021-11-21 08:59:57 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 08:59:57 info: --------------------------------------------
2021-11-21 08:59:59 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
(node:37767) UnhandledPromiseRejectionWarning: TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))
(Use `node --trace-warnings ...` to show where the warning was created)
(node:37767) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
(node:37767) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:37767) UnhandledPromiseRejectionWarning: TypeError: number 2 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37767) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)
(node:37767) UnhandledPromiseRejectionWarning: TypeError: number 3 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37767) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:37767) UnhandledPromiseRejectionWarning: TypeError: number 4 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37767) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 4)
(node:37767) UnhandledPromiseRejectionWarning: TypeError: number 5 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37767) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 5)
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✕ should exist and be executable (2 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✓ should use `dices.map()`
    ✓ should use `Promise.all()`
    ✕ should resolve when all dices settle successfully
    ✕ should reject with an Error when a dice rolls off the table (1 ms)

  ● ex4-pokerDiceAll › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      31 |
      32 |   test('should exist and be executable', () => {
    > 33 |     expect(exported).toBeDefined();
         |                      ^
      34 |   });
      35 |
      36 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:33:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect(received).toBeDefined()

    Received: undefined

      46 |   test('should resolve when all dices settle successfully', async () => {
      47 |     expect.assertions(4);
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      51 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:48:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect.assertions(4)

    Expected four assertions to be called but received one assertion call.

      45 |
      46 |   test('should resolve when all dices settle successfully', async () => {
    > 47 |     expect.assertions(4);
         |            ^
      48 |     expect(exported).toBeDefined();
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:47:12)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
      70 |     expect.assertions(3);
    > 71 |     expect(exported).toBeDefined();
         |                      ^
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      74 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:71:22)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      68 |
      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
    > 70 |     expect.assertions(3);
         |            ^
      71 |     expect(exported).toBeDefined();
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:70:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 passed, 6 total
Snapshots:   0 total
Time:        0.841 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 08:59:59 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  27:7  error    'rollDice' is assigned a value but never used                no-unused-vars
  31:9  warning  Results from `map` are unused. Replace `map` with `forEach`  no-restricted-syntax
  31:9  error    Results from `map` are unused. Replace `map` with `forEach`  hyf/use-map-result

✖ 3 problems (2 errors, 1 warning)


2021-11-21 09:00:09 info: --------------------------------------------
2021-11-21 09:00:09 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:00:09 info: --------------------------------------------
2021-11-21 09:00:11 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
(node:37810) UnhandledPromiseRejectionWarning: TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))
(Use `node --trace-warnings ...` to show where the warning was created)
(node:37810) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 1)
(node:37810) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
(node:37810) UnhandledPromiseRejectionWarning: TypeError: number 2 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37810) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)
(node:37810) UnhandledPromiseRejectionWarning: TypeError: number 3 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37810) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 3)
(node:37810) UnhandledPromiseRejectionWarning: TypeError: number 4 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37810) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 4)
(node:37810) UnhandledPromiseRejectionWarning: TypeError: number 5 is not iterable (cannot read property Symbol(Symbol.iterator))
(node:37810) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 5)
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✕ should exist and be executable (3 ms)
    ✓ should have all TODO comments removed
    ✓ should use `dices.map()`
    ✓ should use `Promise.all()`
    ✕ should resolve when all dices settle successfully (1 ms)
    ✕ should reject with an Error when a dice rolls off the table

  ● ex4-pokerDiceAll › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      31 |
      32 |   test('should exist and be executable', () => {
    > 33 |     expect(exported).toBeDefined();
         |                      ^
      34 |   });
      35 |
      36 |   test('should have all TODO comments removed', () => checkTodos(source));

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:33:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect(received).toBeDefined()

    Received: undefined

      46 |   test('should resolve when all dices settle successfully', async () => {
      47 |     expect.assertions(4);
    > 48 |     expect(exported).toBeDefined();
         |                      ^
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      51 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:48:22)

  ● ex4-pokerDiceAll › should resolve when all dices settle successfully

    expect.assertions(4)

    Expected four assertions to be called but received one assertion call.

      45 |
      46 |   test('should resolve when all dices settle successfully', async () => {
    > 47 |     expect.assertions(4);
         |            ^
      48 |     expect(exported).toBeDefined();
      49 |
      50 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:47:12)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect(received).toBeDefined()

    Received: undefined

      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
      70 |     expect.assertions(3);
    > 71 |     expect(exported).toBeDefined();
         |                      ^
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();
      74 |     const randomSpy = jest.spyOn(Math, 'random').mockReturnValue(0.999);

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:71:22)

  ● ex4-pokerDiceAll › should reject with an Error when a dice rolls off the table

    expect.assertions(3)

    Expected three assertions to be called but received one assertion call.

      68 |
      69 |   test('should reject with an Error when a dice rolls off the table', async () => {
    > 70 |     expect.assertions(3);
         |            ^
      71 |     expect(exported).toBeDefined();
      72 |
      73 |     const logSpy = jest.spyOn(console, 'log').mockImplementation();

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:70:12)

Test Suites: 1 failed, 1 total
Tests:       3 failed, 3 passed, 6 total
Snapshots:   0 total
Time:        0.836 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 09:00:11 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  27:7  error  'rollDice' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 09:01:05 info: --------------------------------------------
2021-11-21 09:01:05 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:01:05 info: --------------------------------------------
2021-11-21 09:01:07 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✓ should exist and be executable (1 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✕ should use `dices.map()` (1 ms)
    ✓ should use `Promise.all()`
    ✓ should resolve when all dices settle successfully (2 ms)
    ✓ should reject with an Error when a dice rolls off the table (2 ms)

  ● ex4-pokerDiceAll › should use `dices.map()`

    expect(received).toBeDefined()

    Received: undefined

      37 |
      38 |   test('should use `dices.map()`', () => {
    > 39 |     expect(state.dicesMap).toBeDefined();
         |                            ^
      40 |   });
      41 |
      42 |   test('should use `Promise.all()`', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:39:28)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 5 passed, 6 total
Snapshots:   0 total
Time:        0.72 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 09:02:38 info: ----------------------------------------------
2021-11-21 09:02:38 info: >>> Running Unit Test `ex5-pokerDiceChain` <<<
2021-11-21 09:02:38 info: ----------------------------------------------
2021-11-21 09:02:40 info: All unit tests passed.
2021-11-21 09:02:41 info: All steps were completed successfully
2021-11-21 09:04:09 info: ----------------------------------------------
2021-11-21 09:04:09 info: >>> Running Unit Test `ex5-pokerDiceChain` <<<
2021-11-21 09:04:09 info: ----------------------------------------------
2021-11-21 09:04:11 info: All unit tests passed.
2021-11-21 09:04:12 info: All steps were completed successfully
2021-11-21 09:05:58 info: ---------------------------------------------
2021-11-21 09:05:58 info: >>> Running Unit Test `ex1-programmerFun` <<<
2021-11-21 09:05:58 info: ---------------------------------------------
2021-11-21 09:05:58 info: Exercise has not yet been modified
2021-11-21 09:06:02 error: *** Unit Test Error Report ***

Command failed: npx jest ex1-programmerFun.test.js --colors
 FAIL  3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js
  programmerFun
    ✓ HTML should be syntactically valid (76 ms)
    ✕ should have all TODO comments removed (7 ms)
    ✕ should use `fetch()`
    ✕ should use async/wait (1 ms)
    ✕ should use try/catch

  ● programmerFun › should have all TODO comments removed

    expect(received).toBeFalsy()

    Received: true

      113 |
      114 | function checkTodos(source) {
    > 115 |   expect(source.includes('TODO')).toBeFalsy();
          |                                   ^
      116 | }
      117 |
      118 | module.exports = {

      at checkTodos (test-runner/unit-test-helpers.js:115:35)
      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:47:55)

  ● programmerFun › should use `fetch()`

    expect(received).toBeDefined()

    Received: undefined

      48 |
      49 |   test('should use `fetch()`', () => {
    > 50 |     expect(state.fetch).toBeDefined();
         |                         ^
      51 |   });
      52 |
      53 |   test('should use async/wait', () => {

      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:50:25)

  ● programmerFun › should use async/wait

    expect(received).toBeDefined()

    Received: undefined

      52 |
      53 |   test('should use async/wait', () => {
    > 54 |     expect(state.async).toBeDefined();
         |                         ^
      55 |     expect(state.await).toBeDefined();
      56 |   });
      57 |

      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:54:25)

  ● programmerFun › should use try/catch

    expect(received).toBeDefined()

    Received: undefined

      57 |
      58 |   test('should use try/catch', () => {
    > 59 |     expect(state.tryCatch).toBeDefined();
         |                            ^
      60 |   });
      61 | });
      62 |

      at Object.<anonymous> (3-UsingAPIs/Week2/unit-tests/ex1-programmerFun.test.js:59:28)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 1 passed, 5 total
Snapshots:   0 total
Time:        2.801 s
Ran all test suites matching /ex1-programmerFun.test.js/i.

2021-11-21 09:06:02 error: *** ESLint Report ***

ex1-programmerFun/index.js
  20:22  error  'url' is defined but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2021-11-21 09:06:11 info: --------------------------------------------
2021-11-21 09:06:11 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:06:11 info: --------------------------------------------
2021-11-21 09:06:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✓ should exist and be executable (1 ms)
    ✓ should have all TODO comments removed
    ✕ should use `dices.map()` (1 ms)
    ✓ should use `Promise.all()` (1 ms)
    ✓ should resolve when all dices settle successfully (1 ms)
    ✓ should reject with an Error when a dice rolls off the table (2 ms)

  ● ex4-pokerDiceAll › should use `dices.map()`

    expect(received).toBeDefined()

    Received: undefined

      37 |
      38 |   test('should use `dices.map()`', () => {
    > 39 |     expect(state.dicesMap).toBeDefined();
         |                            ^
      40 |   });
      41 |
      42 |   test('should use `Promise.all()`', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:39:28)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 5 passed, 6 total
Snapshots:   0 total
Time:        0.808 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

2021-11-21 09:07:12 info: --------------------------------------------
2021-11-21 09:07:12 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:07:12 info: --------------------------------------------
2021-11-21 09:07:13 info: All unit tests passed.
2021-11-21 09:07:14 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  33:9  warning  Results from `map` are unused. Replace `map` with `forEach`  no-restricted-syntax
  33:9  error    Results from `map` are unused. Replace `map` with `forEach`  hyf/use-map-result

✖ 2 problems (1 error, 1 warning)


2021-11-21 09:08:19 info: --------------------------------------------
2021-11-21 09:08:19 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:08:19 info: --------------------------------------------
2021-11-21 09:08:21 info: All unit tests passed.
2021-11-21 09:08:21 error: *** ESLint Report ***

ex4-pokerDiceAll.js
  33:9  warning  Results from `map` are unused. Replace `map` with `forEach`  no-restricted-syntax
  33:9  error    Results from `map` are unused. Replace `map` with `forEach`  hyf/use-map-result

✖ 2 problems (1 error, 1 warning)


2021-11-21 09:08:49 info: --------------------------------------------
2021-11-21 09:08:49 info: >>> Running Unit Test `ex4-pokerDiceAll` <<<
2021-11-21 09:08:49 info: --------------------------------------------
2021-11-21 09:08:51 error: *** Unit Test Error Report ***

Command failed: npx jest ex4-pokerDiceAll.test.js --colors
 FAIL  3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js
  ex4-pokerDiceAll
    ✓ should exist and be executable (1 ms)
    ✓ should have all TODO comments removed (1 ms)
    ✕ should use `dices.map()` (2 ms)
    ✓ should use `Promise.all()`
    ✓ should resolve when all dices settle successfully (1 ms)
    ✓ should reject with an Error when a dice rolls off the table (2 ms)

  ● ex4-pokerDiceAll › should use `dices.map()`

    expect(received).toBeDefined()

    Received: undefined

      37 |
      38 |   test('should use `dices.map()`', () => {
    > 39 |     expect(state.dicesMap).toBeDefined();
         |                            ^
      40 |   });
      41 |
      42 |   test('should use `Promise.all()`', () => {

      at Object.<anonymous> (3-UsingAPIs/Week1/unit-tests/ex4-pokerDiceAll.test.js:39:28)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 5 passed, 6 total
Snapshots:   0 total
Time:        0.716 s, estimated 1 s
Ran all test suites matching /ex4-pokerDiceAll.test.js/i.

